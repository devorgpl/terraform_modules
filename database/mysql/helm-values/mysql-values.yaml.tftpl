auth:
  %{~ if existingSecret != null && existingSecret != "" ~}
  existingSecret: ${existingSecret}
  %{~ endif ~}
  %{~ if rootpassword != null && rootpassword != "" ~}
  rootPassword: "${rootpassword}"
  %{~ endif ~}
  createDatabase: false
passwordUpdateJob:
  enabled: false
  previousPasswords:
    existingSecret: previous-password-secret
livenessProbe:
  failureThreshold: 3
  initialDelaySeconds: 40
  periodSeconds: 20
  successThreshold: 1
  timeoutSeconds: 600
#  replicationPassword: "newReplicationPassword123"
image:
  debug: true
primary:
  configuration: |-
    [mysqld]
    authentication_policy='{{- .Values.auth.authenticationPolicy | default "* ,," }}'
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port={{ .Values.primary.containerPorts.mysql }}
    mysqlx={{ ternary 1 0 .Values.primary.enableMySQLX }}
    mysqlx_port={{ .Values.primary.containerPorts.mysqlx }}
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    slow_query_log=0
    long_query_time=10.0
    {{- if .Values.tls.enabled }}
    ssl_cert=/opt/bitnami/mysql/certs/{{ .Values.tls.certFilename }}
    ssl_key=/opt/bitnami/mysql/certs/{{ .Values.tls.certKeyFilename }}
    {{- if (include "mysql.tlsCACert" .) }}
    ssl_ca={{ include "mysql.tlsCACert" . }}
    {{- end }}
    {{- end }}

    [client]
    port={{ .Values.primary.containerPorts.mysql }}
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin

    [manager]
    port={{ .Values.primary.containerPorts.mysql }}
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    !include /opt/bitnami/mysql/my_custom.cnf
    #
  ## @param primary.existingConfigmap Name of existing ConfigMap with MySQL Primary configuration.
  ## NOTE: When it's set the 'configuration' parameter is ignored
  ##
  extraVolumes:
    - name: custom-cnf
      configMap:
        name: my-custom-cnf
  extraVolumeMounts:
    - name: custom-cnf
      subPath: "my_custom.cnf"
      mountPath: /opt/bitnami/mysql/my_custom.cnf
  service:
    externalIPs:
    %{~ for ip in externalIPs  ~}
      - "${ip}"
    %{~ endfor ~}
#volumePermissions:
#  enabled: true
initdbScripts:
  init_databases.sql: |
    --    CREATE DATABASE IF NOT EXISTS `pim`;
    --    CREATE DATABASE IF NOT EXISTS `shop`;
    --    GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
    --    FLUSH PRIVILEGES;
metrics:
  enabled: true
volumePermissions:
  enabled: true
